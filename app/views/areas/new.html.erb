<% if current_user %>
<%- model_class = Area -%>

  <h1><%=t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize %></h1>


    <div class="row">
	  <div class="col-xs-10 col-xs-offset-1">
        <br><br>
        <%= render 'editmap' %>
        <hr>
        <br><br>
        <%= render :partial => 'form' %>
      </div>
    </div>
    
<script>
	// Initialise the FeatureGroup to store editable layers
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);


	// Initialise and alter the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
		draw: {
			//These options make up the root object that is used when initialising the Leaflet.draw control.
			position: 'topleft',
			polygon: {
				allowIntersection: false,
				drawError: {
					color: '#00dd00',
					timeout: 1000
				},
				shapeOptions: {
					color: '#00dd00',
				weight: 1
				},
				showArea: true
			},
			polyline:  false,
			rectangle:  {
				shapeOptions: {
					color: '#00dd00',
				weight: 1
				}
			},
			circle: false
        },
		edit: {
			featureGroup: drawnItems
		}
	});
	map.addControl(drawControl);
	
	
	//draw:created - Triggered when a new vector or marker has been created.
	map.on('draw:created', function (e) {
		var type = e.layerType,
			layer = e.layer;
		
		var shape = layer.toGeoJSON();
  		var shape_for_db = JSON.stringify(shape);

		drawnItems.addLayer(layer);
		
		//alert(shape_for_db);
		//For saving to db - this changes value of coords field
		document.getElementById('area_coords').value = shape_for_db;
	});
</script>   

<% else %>
 <h2>Must be logged in. <a href="/" class="btn btn-default">Return Home</a></h2>
<% end %>