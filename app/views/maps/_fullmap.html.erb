<div id='map' class="mapshowmap" style="height:464px;"></div>

<script>
	//A Leaflet map has one CRS (and one CRS only), that can be changed when creating the map. 
	//In a CRS.Simple, one horizontal map unit is mapped to one horizontal pixel, 
	<% if @image.height.to_i > 10000 %>
	var map = L.map('map', {attributionControl: false, crs: L.CRS.Simple, zoomSnap: 0.25, minZoom: -6});
	<% elsif @image.height.to_i > 5000 && @image.height.to_i <= 10000 %>
	var map = L.map('map', {attributionControl: false, crs: L.CRS.Simple, zoomSnap: 0.25, minZoom: -5});
	<% elsif @image.height.to_i > 2500 && @image.height.to_i <= 5000 %>
	var map = L.map('map', {attributionControl: false, crs: L.CRS.Simple, zoomSnap: 0.25, minZoom: -4});
	<% else %>
	var map = L.map('map', {attributionControl: false, crs: L.CRS.Simple, zoomSnap: 0.25, minZoom: -3});
	<% end %>

	var attributionInfo = L.control.attribution({prefix: '<span class="AttributionClass">Map: <%= link_to @map.name, map_path(@map) %> | <%= @image.width.to_i %>w, <%= @image.height.to_i %>h</span>'}).addTo(map);


	//If working with [y, x] coordinates with something named L.LatLng doesnâ€™t make much sense to you, 
	//you can easily create wrappers for them:
	var yx = L.latLng;

	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};

	//Then we can just add a L.ImageOverlay with the starmap image and its approximate bounds:

	var bounds = [xy(0,0), xy(<%= @image.width %>,<%= @image.height %>)];

	var image = L.imageOverlay('<%= @image.image_url %>', bounds).addTo(map);
	
	
	//this will set map initially with whole map showing
	//map.setView(xy(120, 70), 1);
	
    //this will set map initially with it zoomed up to natural image size
    //map.fitBounds(bounds);
    
    //this checks image size and then sets map slightly zoomed in on image
    <% if @image.width.to_i > 10000 %>
        map.setView(xy(<%= @image.width.to_i/2 %>, <%= @image.height.to_i/2 %>), -5);
    <% elsif @image.width.to_i > 5000 && @image.width.to_i <= 10000 %>
        map.setView(xy(<%= @image.width.to_i/2 %>, <%= @image.height.to_i/2 %>), -3);
    <% elsif @image.width.to_i > 2500 && @image.width.to_i <= 5000 %>
        map.setView(xy(<%= @image.width.to_i/2 %>, <%= @image.height.to_i/2 %>), -1.5);
    <% else %>
        map.setView(xy(<%= @image.width.to_i/2 %>, <%= @image.height.to_i/2 %>), .25);
    <% end %>
    
    // Restrict view to bounds
	//map.setMaxBounds(bounds);

    var popup = L.popup();
    
    //same on all maps - Now we can create our icons from this class and use them:
    <%= render 'marker_variables' %>
    
    var leasingStatus = L.layerGroup();
    
    <% @mapareas.each do |area| %>
        var <%= 'ls' + area.id.to_s + area.suite_number.gsub(/\W\s?/, "") %> = <%= area.coords.html_safe %>;
        
        L.geoJson(<%= 'ls' + area.id.to_s + area.suite_number.gsub(/\W\s?/, "") %>, {
        pointToLayer: function (feature, latlng) {
        return L.marker(latlng, {<% if area.status == 'Available' %>icon: redIcon<% elsif area.status == 'Prospect' %>icon: yellowIcon<% elsif area.status == 'LOI'  %>icon: orangeIcon<% elsif area.status == 'At Lease'  %>icon: blueIcon<% elsif area.status == 'Leased'  %>icon: greenIcon<% else %>icon: grayIcon <% end %>});
        }}).addTo(leasingStatus).bindPopup('<div style="width:300px;"><p style="margin-top:0;margin-bottom:4px;"><strong><%= area.suite_number %></strong></p><hr style="margin-top:0;margin-bottom:6px;"><div style="float:left;width:48%;"></div><div style="float:right;width:48%;"><p style="margin-top:4px;margin-bottom:4px;">Suite #:<br>Sq ft: <br>Lease Status: <br><%= link_to "More Info...", area_path(area) %></p></div><br style="clear:both;"></div>').setStyle({
    	<% if area.status == 'Available' %>fillColor: '#D13E27', color: '#D13E27', weight: 1, opacity: 0.8, fillOpacity: 0.8<% elsif area.status == 'Prospect' %>fillColor: '#dddd4e', color: '#dddd4e', weight: 1, opacity: 0.8, fillOpacity: 0.8<% elsif area.status == 'LOI' %>fillColor: '#f15b28', color: '#f15b28', weight: 1, opacity: 0.8, fillOpacity: 0.8<% elsif area.status == 'At Lease' %>fillColor: '#15958A', color: '#15958A', weight: 1, opacity: 0.8, fillOpacity: 0.8<% elsif area.status == 'Leased' %>fillColor: '#8BC53F', color: '#8BC53F', weight: 1, opacity: 0.8, fillOpacity: 0.8<% else %>fillColor: '#dd0000', color: '#dd0000', weight: 1, opacity: 0.8, fillOpacity: 0.8<% end %>});
    <% end %>
    
    /****
    * Basic example - nothing dynamic
    var testarea101 = {"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[52.71875,632.0859375],[174.626953125,627.8515625],[175.564453125,569.68359375],[103.416015625,568.15625],[103.013671875,550.205078125],[52.423828125,556.087890625],[52.71875,632.0859375]]]}};  

    L.geoJson(testarea101, {
    pointToLayer: function (feature, latlng) {
    return L.marker(latlng, {icon: grayIcon});
    }}).addTo(leasingStatus).bindPopup('<div style="width:300px;"><p style="margin-top:0;margin-bottom:4px;"><strong>Area Title</strong></p><hr style="margin-top:0;margin-bottom:6px;"><div style="float:left;width:48%;"></div><div style="float:right;width:48%;"><p style="margin-top:4px;margin-bottom:4px;">Suite #:<br>Sq ft: <br>Lease Status: <br><%#= link_to "More Info...", area_path(area) %></p></div><br style="clear:both;"></div>').setStyle({
	fillColor: '#dd0000', color: '#dd0000', weight: 1, opacity: 0.8, fillOpacity: 0.8});
    */
    
    leasingStatus.addTo(map);

</script>